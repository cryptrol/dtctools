// Code generated by protoc-gen-go.
// source: envelope.proto
// DO NOT EDIT!

/*
Package envelope is a generated protocol buffer package.

It is generated from these files:
	envelope.proto

It has these top-level messages:
	Envelope
*/
package envelope

import proto "github.com/golang/protobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type Envelope_CompressionMethod int32

const (
	Envelope_None  Envelope_CompressionMethod = 0
	Envelope_Bzip2 Envelope_CompressionMethod = 1
	Envelope_Xz    Envelope_CompressionMethod = 2
)

var Envelope_CompressionMethod_name = map[int32]string{
	0: "None",
	1: "Bzip2",
	2: "Xz",
}
var Envelope_CompressionMethod_value = map[string]int32{
	"None":  0,
	"Bzip2": 1,
	"Xz":    2,
}

func (x Envelope_CompressionMethod) Enum() *Envelope_CompressionMethod {
	p := new(Envelope_CompressionMethod)
	*p = x
	return p
}
func (x Envelope_CompressionMethod) String() string {
	return proto.EnumName(Envelope_CompressionMethod_name, int32(x))
}
func (x *Envelope_CompressionMethod) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Envelope_CompressionMethod_value, data, "Envelope_CompressionMethod")
	if err != nil {
		return err
	}
	*x = Envelope_CompressionMethod(value)
	return nil
}

type Envelope_UpdateMethod int32

const (
	Envelope_Replace   Envelope_UpdateMethod = 0
	Envelope_ApplyDiff Envelope_UpdateMethod = 1
)

var Envelope_UpdateMethod_name = map[int32]string{
	0: "Replace",
	1: "ApplyDiff",
}
var Envelope_UpdateMethod_value = map[string]int32{
	"Replace":   0,
	"ApplyDiff": 1,
}

func (x Envelope_UpdateMethod) Enum() *Envelope_UpdateMethod {
	p := new(Envelope_UpdateMethod)
	*p = x
	return p
}
func (x Envelope_UpdateMethod) String() string {
	return proto.EnumName(Envelope_UpdateMethod_name, int32(x))
}
func (x *Envelope_UpdateMethod) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Envelope_UpdateMethod_value, data, "Envelope_UpdateMethod")
	if err != nil {
		return err
	}
	*x = Envelope_UpdateMethod(value)
	return nil
}

type Envelope struct {
	FileName    *string                     `protobuf:"bytes,1,opt" json:"FileName,omitempty"`
	ContentType *string                     `protobuf:"bytes,2,opt" json:"ContentType,omitempty"`
	Compression *Envelope_CompressionMethod `protobuf:"varint,3,req,enum=Envelope_CompressionMethod" json:"Compression,omitempty"`
	PublicKey   *string                     `protobuf:"bytes,4,opt" json:"PublicKey,omitempty"`
	Signature   *string                     `protobuf:"bytes,5,opt" json:"Signature,omitempty"`
	// Big files can be sent as several txes
	PartNumber       *uint32                   `protobuf:"varint,6,opt" json:"PartNumber,omitempty"`
	TotalParts       *uint32                   `protobuf:"varint,7,opt" json:"TotalParts,omitempty"`
	PrevTxId         *string                   `protobuf:"bytes,8,opt" json:"PrevTxId,omitempty"`
	Data             []byte                    `protobuf:"bytes,9,req" json:"Data,omitempty"`
	XXX_extensions   map[int32]proto.Extension `json:"-"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *Envelope) Reset()         { *m = Envelope{} }
func (m *Envelope) String() string { return proto.CompactTextString(m) }
func (*Envelope) ProtoMessage()    {}

var extRange_Envelope = []proto.ExtensionRange{
	{10, 536870911},
}

func (*Envelope) ExtensionRangeArray() []proto.ExtensionRange {
	return extRange_Envelope
}
func (m *Envelope) ExtensionMap() map[int32]proto.Extension {
	if m.XXX_extensions == nil {
		m.XXX_extensions = make(map[int32]proto.Extension)
	}
	return m.XXX_extensions
}

func (m *Envelope) GetFileName() string {
	if m != nil && m.FileName != nil {
		return *m.FileName
	}
	return ""
}

func (m *Envelope) GetContentType() string {
	if m != nil && m.ContentType != nil {
		return *m.ContentType
	}
	return ""
}

func (m *Envelope) GetCompression() Envelope_CompressionMethod {
	if m != nil && m.Compression != nil {
		return *m.Compression
	}
	return Envelope_None
}

func (m *Envelope) GetPublicKey() string {
	if m != nil && m.PublicKey != nil {
		return *m.PublicKey
	}
	return ""
}

func (m *Envelope) GetSignature() string {
	if m != nil && m.Signature != nil {
		return *m.Signature
	}
	return ""
}

func (m *Envelope) GetPartNumber() uint32 {
	if m != nil && m.PartNumber != nil {
		return *m.PartNumber
	}
	return 0
}

func (m *Envelope) GetTotalParts() uint32 {
	if m != nil && m.TotalParts != nil {
		return *m.TotalParts
	}
	return 0
}

func (m *Envelope) GetPrevTxId() string {
	if m != nil && m.PrevTxId != nil {
		return *m.PrevTxId
	}
	return ""
}

func (m *Envelope) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func init() {
	proto.RegisterEnum("Envelope_CompressionMethod", Envelope_CompressionMethod_name, Envelope_CompressionMethod_value)
	proto.RegisterEnum("Envelope_UpdateMethod", Envelope_UpdateMethod_name, Envelope_UpdateMethod_value)
}
